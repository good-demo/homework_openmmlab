{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Oct 18 2022, 18:57:03) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr\nNVCC: Cuda compilation tools, release 10.1, V10.1.24\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.6.0\nMMCV: 1.6.2\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.29.0+", "seed": 1912064538, "exp_name": "pupil.py", "mmseg_version": "0.29.0+", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nbackbone_norm_cfg = dict(type='LN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='SwinTransformer',\n        pretrain_img_size=192,\n        embed_dims=48,\n        patch_size=4,\n        window_size=6,\n        mlp_ratio=4,\n        depths=[2, 2, 6, 2],\n        num_heads=[4, 8, 16, 32],\n        strides=(4, 2, 2, 2),\n        out_indices=(0, 1, 2, 3),\n        qkv_bias=True,\n        qk_scale=None,\n        patch_norm=True,\n        drop_rate=0.0,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.3,\n        use_abs_pos_embed=False,\n        act_cfg=dict(type='GELU'),\n        norm_cfg=dict(type='LN', requires_grad=True),\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='/home/data1/yxd/mmsegmentation/simmim/new.pth')),\n    decode_head=dict(\n        type='UPerHead',\n        in_channels=[48, 96, 192, 384],\n        in_index=[0, 1, 2, 3],\n        pool_scales=(1, 2, 3, 6),\n        channels=512,\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(type='DiceLoss', loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=192,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(type='DiceLoss', loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'ChaseDB1Dataset'\ndata_root = 'data/CHASE_DB1'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (48, 48)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=False),\n    dict(type='Resize', img_scale=(192, 192), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(48, 48), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(48, 48), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(192, 192),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=200,\n    workers_per_gpu=4,\n    train=dict(\n        type='ChaseDB1Dataset',\n        data_root='data/CHASE_DB1',\n        img_dir='images/training',\n        ann_dir='annotations/training',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=False),\n            dict(type='Resize', img_scale=(192, 192), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(48, 48), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(48, 48), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='ChaseDB1Dataset',\n        data_root='data/CHASE_DB1',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(192, 192),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='ChaseDB1Dataset',\n        data_root='data/CHASE_DB1',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(192, 192),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2160)\ncheckpoint_config = dict(by_epoch=False, interval=200)\nevaluation = dict(interval=700, metric='mIoU')\ncheckpoint_file = '/home/data1/yxd/mmsegmentation/simmim/new.pth'\nwork_dir = './work_dirs/pupil'\ngpu_ids = range(0, 8)\nauto_resume = False\ndevice = 'cuda'\nseed = 1912064538\n", "CLASSES": ["background", "vessel"], "PALETTE": [[120, 120, 120], [6, 230, 230]]}
{"mode": "train", "epoch": 49, "iter": 50, "lr": 0.0, "memory": 9152, "data_time": 3.96538, "decode.loss_dice": 0.49478, "decode.acc_seg": 69.53689, "aux.loss_dice": 0.20499, "aux.acc_seg": 51.68677, "loss": 0.69977, "time": 4.63104}
{"mode": "train", "epoch": 99, "iter": 100, "lr": 0.0, "memory": 9152, "data_time": 4.01307, "decode.loss_dice": 0.47165, "decode.acc_seg": 76.48527, "aux.loss_dice": 0.20353, "aux.acc_seg": 59.09192, "loss": 0.67518, "time": 4.51676}
{"mode": "train", "epoch": 149, "iter": 150, "lr": 1e-05, "memory": 9152, "data_time": 3.99091, "decode.loss_dice": 0.4414, "decode.acc_seg": 81.88742, "aux.loss_dice": 0.20044, "aux.acc_seg": 65.21211, "loss": 0.64184, "time": 4.52542}
{"mode": "train", "epoch": 199, "iter": 200, "lr": 1e-05, "memory": 9152, "data_time": 3.96805, "decode.loss_dice": 0.40341, "decode.acc_seg": 88.15843, "aux.loss_dice": 0.19479, "aux.acc_seg": 75.40326, "loss": 0.5982, "time": 4.55188}
{"mode": "train", "epoch": 249, "iter": 250, "lr": 1e-05, "memory": 9152, "data_time": 4.02519, "decode.loss_dice": 0.37294, "decode.acc_seg": 92.61889, "aux.loss_dice": 0.18506, "aux.acc_seg": 85.90823, "loss": 0.558, "time": 4.54247}
{"mode": "train", "epoch": 299, "iter": 300, "lr": 1e-05, "memory": 9152, "data_time": 4.01522, "decode.loss_dice": 0.35674, "decode.acc_seg": 94.14048, "aux.loss_dice": 0.17555, "aux.acc_seg": 90.05652, "loss": 0.5323, "time": 4.54651}
{"mode": "train", "epoch": 349, "iter": 350, "lr": 1e-05, "memory": 9152, "data_time": 4.01424, "decode.loss_dice": 0.34664, "decode.acc_seg": 94.82571, "aux.loss_dice": 0.16883, "aux.acc_seg": 91.57752, "loss": 0.51546, "time": 4.54327}
{"mode": "train", "epoch": 399, "iter": 400, "lr": 1e-05, "memory": 9152, "data_time": 3.99174, "decode.loss_dice": 0.33741, "decode.acc_seg": 95.16067, "aux.loss_dice": 0.16323, "aux.acc_seg": 92.39905, "loss": 0.50064, "time": 4.55329}
{"mode": "train", "epoch": 449, "iter": 450, "lr": 1e-05, "memory": 9152, "data_time": 4.00861, "decode.loss_dice": 0.32905, "decode.acc_seg": 95.44376, "aux.loss_dice": 0.15947, "aux.acc_seg": 92.93598, "loss": 0.48852, "time": 4.5357}
{"mode": "train", "epoch": 499, "iter": 500, "lr": 2e-05, "memory": 9152, "data_time": 4.05056, "decode.loss_dice": 0.27243, "decode.acc_seg": 94.6449, "aux.loss_dice": 0.15664, "aux.acc_seg": 93.05061, "loss": 0.42907, "time": 4.53985}
{"mode": "train", "epoch": 549, "iter": 550, "lr": 2e-05, "memory": 9152, "data_time": 3.99446, "decode.loss_dice": 0.21195, "decode.acc_seg": 95.17415, "aux.loss_dice": 0.1534, "aux.acc_seg": 93.27511, "loss": 0.36535, "time": 4.52897}
{"mode": "train", "epoch": 599, "iter": 600, "lr": 2e-05, "memory": 9152, "data_time": 3.97955, "decode.loss_dice": 0.16932, "decode.acc_seg": 95.46093, "aux.loss_dice": 0.15133, "aux.acc_seg": 93.55399, "loss": 0.32065, "time": 4.52755}
{"mode": "train", "epoch": 649, "iter": 650, "lr": 2e-05, "memory": 9152, "data_time": 3.97832, "decode.loss_dice": 0.14158, "decode.acc_seg": 95.87747, "aux.loss_dice": 0.14894, "aux.acc_seg": 93.8899, "loss": 0.29052, "time": 4.50087}
{"mode": "train", "epoch": 699, "iter": 700, "lr": 2e-05, "memory": 9152, "data_time": 3.98666, "decode.loss_dice": 0.12667, "decode.acc_seg": 96.07403, "aux.loss_dice": 0.14705, "aux.acc_seg": 93.9748, "loss": 0.27372, "time": 4.52313}
{"mode": "val", "epoch": 699, "iter": 82, "lr": 2e-05, "aAcc": 0.9637, "mIoU": 0.6709, "mAcc": 0.9407, "IoU.background": 0.9629, "IoU.vessel": 0.379, "Acc.background": 0.9648, "Acc.vessel": 0.9166}
{"mode": "train", "epoch": 749, "iter": 750, "lr": 2e-05, "memory": 9174, "data_time": 4.46837, "decode.loss_dice": 0.11495, "decode.acc_seg": 96.31098, "aux.loss_dice": 0.1453, "aux.acc_seg": 94.13331, "loss": 0.26025, "time": 4.98346}
{"mode": "train", "epoch": 799, "iter": 800, "lr": 2e-05, "memory": 9174, "data_time": 3.995, "decode.loss_dice": 0.10757, "decode.acc_seg": 96.46177, "aux.loss_dice": 0.14436, "aux.acc_seg": 94.26698, "loss": 0.25193, "time": 4.5572}
{"mode": "train", "epoch": 849, "iter": 850, "lr": 2e-05, "memory": 9174, "data_time": 4.12117, "decode.loss_dice": 0.09886, "decode.acc_seg": 96.66928, "aux.loss_dice": 0.14294, "aux.acc_seg": 94.34859, "loss": 0.2418, "time": 4.56007}
{"mode": "train", "epoch": 899, "iter": 900, "lr": 2e-05, "memory": 9174, "data_time": 4.09381, "decode.loss_dice": 0.09306, "decode.acc_seg": 96.8759, "aux.loss_dice": 0.14194, "aux.acc_seg": 94.45326, "loss": 0.23501, "time": 4.57133}
{"mode": "train", "epoch": 949, "iter": 950, "lr": 2e-05, "memory": 9174, "data_time": 4.05748, "decode.loss_dice": 0.08868, "decode.acc_seg": 96.92521, "aux.loss_dice": 0.14032, "aux.acc_seg": 94.55887, "loss": 0.22899, "time": 4.58065}
{"mode": "train", "epoch": 999, "iter": 1000, "lr": 2e-05, "memory": 9174, "data_time": 4.09982, "decode.loss_dice": 0.08558, "decode.acc_seg": 96.99427, "aux.loss_dice": 0.13947, "aux.acc_seg": 94.57949, "loss": 0.22506, "time": 4.59995}
{"mode": "train", "epoch": 1049, "iter": 1050, "lr": 2e-05, "memory": 9174, "data_time": 4.09076, "decode.loss_dice": 0.08286, "decode.acc_seg": 97.07083, "aux.loss_dice": 0.13776, "aux.acc_seg": 94.49158, "loss": 0.22061, "time": 4.55359}
{"mode": "train", "epoch": 1099, "iter": 1100, "lr": 2e-05, "memory": 9174, "data_time": 4.05921, "decode.loss_dice": 0.07998, "decode.acc_seg": 97.13287, "aux.loss_dice": 0.12976, "aux.acc_seg": 94.07104, "loss": 0.20974, "time": 4.57501}
{"mode": "train", "epoch": 1149, "iter": 1150, "lr": 2e-05, "memory": 9174, "data_time": 4.02664, "decode.loss_dice": 0.07828, "decode.acc_seg": 97.19684, "aux.loss_dice": 0.10467, "aux.acc_seg": 93.43648, "loss": 0.18295, "time": 4.57294}
{"mode": "train", "epoch": 1199, "iter": 1200, "lr": 2e-05, "memory": 9174, "data_time": 4.00794, "decode.loss_dice": 0.07541, "decode.acc_seg": 97.25951, "aux.loss_dice": 0.08675, "aux.acc_seg": 93.83034, "loss": 0.16216, "time": 4.56045}
{"mode": "train", "epoch": 1249, "iter": 1250, "lr": 2e-05, "memory": 9174, "data_time": 4.0044, "decode.loss_dice": 0.07233, "decode.acc_seg": 97.39161, "aux.loss_dice": 0.07277, "aux.acc_seg": 94.42109, "loss": 0.1451, "time": 4.51908}
{"mode": "train", "epoch": 1299, "iter": 1300, "lr": 2e-05, "memory": 9174, "data_time": 4.00199, "decode.loss_dice": 0.07169, "decode.acc_seg": 97.34371, "aux.loss_dice": 0.0639, "aux.acc_seg": 94.6028, "loss": 0.13559, "time": 4.51961}
{"mode": "train", "epoch": 1349, "iter": 1350, "lr": 2e-05, "memory": 9174, "data_time": 4.01085, "decode.loss_dice": 0.06811, "decode.acc_seg": 97.49895, "aux.loss_dice": 0.05803, "aux.acc_seg": 94.9482, "loss": 0.12613, "time": 4.5402}
{"mode": "train", "epoch": 1399, "iter": 1400, "lr": 2e-05, "memory": 9174, "data_time": 4.01864, "decode.loss_dice": 0.06817, "decode.acc_seg": 97.45742, "aux.loss_dice": 0.05489, "aux.acc_seg": 95.01276, "loss": 0.12306, "time": 4.56264}
{"mode": "val", "epoch": 1399, "iter": 82, "lr": 2e-05, "aAcc": 0.9819, "mIoU": 0.7485, "mAcc": 0.8916, "IoU.background": 0.9815, "IoU.vessel": 0.5155, "Acc.background": 0.9865, "Acc.vessel": 0.7968}
{"mode": "train", "epoch": 1449, "iter": 1450, "lr": 2e-05, "memory": 9174, "data_time": 4.36295, "decode.loss_dice": 0.06686, "decode.acc_seg": 97.53354, "aux.loss_dice": 0.05286, "aux.acc_seg": 95.15859, "loss": 0.11972, "time": 4.8829}
{"mode": "train", "epoch": 1499, "iter": 1500, "lr": 2e-05, "memory": 9174, "data_time": 4.0143, "decode.loss_dice": 0.06523, "decode.acc_seg": 97.58358, "aux.loss_dice": 0.05051, "aux.acc_seg": 95.29379, "loss": 0.11573, "time": 4.5318}
{"mode": "train", "epoch": 1549, "iter": 1550, "lr": 2e-05, "memory": 9174, "data_time": 4.00887, "decode.loss_dice": 0.06406, "decode.acc_seg": 97.60494, "aux.loss_dice": 0.04879, "aux.acc_seg": 95.3862, "loss": 0.11285, "time": 4.5358}
{"mode": "train", "epoch": 1599, "iter": 1600, "lr": 2e-05, "memory": 9174, "data_time": 4.02061, "decode.loss_dice": 0.06292, "decode.acc_seg": 97.64741, "aux.loss_dice": 0.04757, "aux.acc_seg": 95.39821, "loss": 0.11049, "time": 4.56776}
{"mode": "train", "epoch": 1649, "iter": 1650, "lr": 1e-05, "memory": 9174, "data_time": 4.00185, "decode.loss_dice": 0.06161, "decode.acc_seg": 97.66083, "aux.loss_dice": 0.04674, "aux.acc_seg": 95.4209, "loss": 0.10835, "time": 4.5322}
{"mode": "train", "epoch": 1699, "iter": 1700, "lr": 1e-05, "memory": 9174, "data_time": 4.00848, "decode.loss_dice": 0.06185, "decode.acc_seg": 97.66447, "aux.loss_dice": 0.04625, "aux.acc_seg": 95.45977, "loss": 0.1081, "time": 4.53249}
{"mode": "train", "epoch": 1749, "iter": 1750, "lr": 1e-05, "memory": 9174, "data_time": 3.97839, "decode.loss_dice": 0.06113, "decode.acc_seg": 97.70427, "aux.loss_dice": 0.04573, "aux.acc_seg": 95.49771, "loss": 0.10686, "time": 4.52197}
{"mode": "train", "epoch": 1799, "iter": 1800, "lr": 1e-05, "memory": 9174, "data_time": 4.01956, "decode.loss_dice": 0.0592, "decode.acc_seg": 97.77183, "aux.loss_dice": 0.04464, "aux.acc_seg": 95.58228, "loss": 0.10384, "time": 4.56797}
{"mode": "train", "epoch": 1849, "iter": 1850, "lr": 1e-05, "memory": 9174, "data_time": 3.97641, "decode.loss_dice": 0.05942, "decode.acc_seg": 97.76057, "aux.loss_dice": 0.0444, "aux.acc_seg": 95.63156, "loss": 0.10382, "time": 4.53168}
{"mode": "train", "epoch": 1899, "iter": 1900, "lr": 1e-05, "memory": 9174, "data_time": 4.01911, "decode.loss_dice": 0.05849, "decode.acc_seg": 97.76867, "aux.loss_dice": 0.04396, "aux.acc_seg": 95.63386, "loss": 0.10245, "time": 4.55219}
{"mode": "train", "epoch": 1949, "iter": 1950, "lr": 1e-05, "memory": 9174, "data_time": 3.99255, "decode.loss_dice": 0.05802, "decode.acc_seg": 97.81056, "aux.loss_dice": 0.04384, "aux.acc_seg": 95.66233, "loss": 0.10186, "time": 4.55165}
{"mode": "train", "epoch": 1999, "iter": 2000, "lr": 0.0, "memory": 9174, "data_time": 4.00019, "decode.loss_dice": 0.05699, "decode.acc_seg": 97.8612, "aux.loss_dice": 0.04335, "aux.acc_seg": 95.72347, "loss": 0.10034, "time": 4.55786}
{"mode": "train", "epoch": 2049, "iter": 2050, "lr": 0.0, "memory": 9174, "data_time": 3.99936, "decode.loss_dice": 0.05791, "decode.acc_seg": 97.83561, "aux.loss_dice": 0.04358, "aux.acc_seg": 95.70066, "loss": 0.10149, "time": 4.5179}
{"mode": "train", "epoch": 2099, "iter": 2100, "lr": 0.0, "memory": 9174, "data_time": 3.98402, "decode.loss_dice": 0.05675, "decode.acc_seg": 97.84005, "aux.loss_dice": 0.04317, "aux.acc_seg": 95.6977, "loss": 0.09992, "time": 4.55918}
{"mode": "val", "epoch": 2099, "iter": 82, "lr": 0.0, "aAcc": 0.9758, "mIoU": 0.7187, "mAcc": 0.9187, "IoU.background": 0.9753, "IoU.vessel": 0.462, "Acc.background": 0.9787, "Acc.vessel": 0.8588}
{"mode": "train", "epoch": 2149, "iter": 2150, "lr": 0.0, "memory": 9174, "data_time": 4.37151, "decode.loss_dice": 0.05629, "decode.acc_seg": 97.89935, "aux.loss_dice": 0.04277, "aux.acc_seg": 95.76608, "loss": 0.09907, "time": 4.88763}
