{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Oct 18 2022, 18:57:03) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr\nNVCC: Cuda compilation tools, release 10.1, V10.1.24\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.7.0\nMMCV: 1.6.2\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.25.2+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='open-mmlab://detectron2/resnet50_caffe')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='Resize',\n        img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),\n                   (1333, 768), (1333, 800)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='balloon/train/annotation_coco.json',\n        img_prefix='balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=True,\n                poly2mask=False),\n            dict(\n                type='Resize',\n                img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),\n                           (1333, 768), (1333, 800)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='balloon/val/annotation_coco.json',\n        img_prefix='balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='balloon/val/annotation_coco.json',\n        img_prefix='balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco_bbox_mAP-0.408__segm_mAP-0.37_20200504_163245-42aa3d00.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('balloon', )\nwork_dir = './work_dirs/balloon'\nauto_resume = False\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "balloon.py"}
{"mode": "val", "epoch": 1, "iter": 7, "lr": 0.00122, "bbox_mAP": 0.294, "bbox_mAP_50": 0.437, "bbox_mAP_75": 0.397, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.017, "bbox_mAP_l": 0.399, "bbox_mAP_copypaste": "0.294 0.437 0.397 0.000 0.017 0.399", "segm_mAP": 0.323, "segm_mAP_50": 0.436, "segm_mAP_75": 0.388, "segm_mAP_s": 0.0, "segm_mAP_m": 0.007, "segm_mAP_l": 0.445, "segm_mAP_copypaste": "0.323 0.436 0.388 0.000 0.007 0.445"}
{"mode": "val", "epoch": 2, "iter": 7, "lr": 0.00246, "bbox_mAP": 0.454, "bbox_mAP_50": 0.705, "bbox_mAP_75": 0.582, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.23, "bbox_mAP_l": 0.556, "bbox_mAP_copypaste": "0.454 0.705 0.582 0.000 0.230 0.556", "segm_mAP": 0.529, "segm_mAP_50": 0.674, "segm_mAP_75": 0.589, "segm_mAP_s": 0.0, "segm_mAP_m": 0.303, "segm_mAP_l": 0.64, "segm_mAP_copypaste": "0.529 0.674 0.589 0.000 0.303 0.640"}
{"mode": "val", "epoch": 3, "iter": 7, "lr": 0.0037, "bbox_mAP": 0.636, "bbox_mAP_50": 0.842, "bbox_mAP_75": 0.828, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.491, "bbox_mAP_l": 0.7, "bbox_mAP_copypaste": "0.636 0.842 0.828 0.000 0.491 0.700", "segm_mAP": 0.748, "segm_mAP_50": 0.828, "segm_mAP_75": 0.816, "segm_mAP_s": 0.0, "segm_mAP_m": 0.503, "segm_mAP_l": 0.837, "segm_mAP_copypaste": "0.748 0.828 0.816 0.000 0.503 0.837"}
{"mode": "val", "epoch": 4, "iter": 7, "lr": 0.00494, "bbox_mAP": 0.699, "bbox_mAP_50": 0.87, "bbox_mAP_75": 0.83, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.582, "bbox_mAP_l": 0.759, "bbox_mAP_copypaste": "0.699 0.870 0.830 0.000 0.582 0.759", "segm_mAP": 0.766, "segm_mAP_50": 0.855, "segm_mAP_75": 0.855, "segm_mAP_s": 0.0, "segm_mAP_m": 0.593, "segm_mAP_l": 0.843, "segm_mAP_copypaste": "0.766 0.855 0.855 0.000 0.593 0.843"}
{"mode": "val", "epoch": 5, "iter": 7, "lr": 0.00617, "bbox_mAP": 0.723, "bbox_mAP_50": 0.858, "bbox_mAP_75": 0.844, "bbox_mAP_s": 0.151, "bbox_mAP_m": 0.575, "bbox_mAP_l": 0.782, "bbox_mAP_copypaste": "0.723 0.858 0.844 0.151 0.575 0.782", "segm_mAP": 0.758, "segm_mAP_50": 0.851, "segm_mAP_75": 0.811, "segm_mAP_s": 0.071, "segm_mAP_m": 0.497, "segm_mAP_l": 0.831, "segm_mAP_copypaste": "0.758 0.851 0.811 0.071 0.497 0.831"}
{"mode": "val", "epoch": 6, "iter": 7, "lr": 0.00741, "bbox_mAP": 0.617, "bbox_mAP_50": 0.814, "bbox_mAP_75": 0.708, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.511, "bbox_mAP_l": 0.659, "bbox_mAP_copypaste": "0.617 0.814 0.708 0.404 0.511 0.659", "segm_mAP": 0.692, "segm_mAP_50": 0.814, "segm_mAP_75": 0.794, "segm_mAP_s": 0.151, "segm_mAP_m": 0.531, "segm_mAP_l": 0.756, "segm_mAP_copypaste": "0.692 0.814 0.794 0.151 0.531 0.756"}
{"mode": "val", "epoch": 7, "iter": 7, "lr": 0.00865, "bbox_mAP": 0.701, "bbox_mAP_50": 0.841, "bbox_mAP_75": 0.823, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.444, "bbox_mAP_l": 0.796, "bbox_mAP_copypaste": "0.701 0.841 0.823 0.000 0.444 0.796", "segm_mAP": 0.734, "segm_mAP_50": 0.814, "segm_mAP_75": 0.796, "segm_mAP_s": 0.0, "segm_mAP_m": 0.414, "segm_mAP_l": 0.835, "segm_mAP_copypaste": "0.734 0.814 0.796 0.000 0.414 0.835"}
{"mode": "val", "epoch": 8, "iter": 7, "lr": 0.00989, "bbox_mAP": 0.651, "bbox_mAP_50": 0.794, "bbox_mAP_75": 0.772, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.41, "bbox_mAP_l": 0.761, "bbox_mAP_copypaste": "0.651 0.794 0.772 0.000 0.410 0.761", "segm_mAP": 0.693, "segm_mAP_50": 0.77, "segm_mAP_75": 0.77, "segm_mAP_s": 0.0, "segm_mAP_m": 0.461, "segm_mAP_l": 0.803, "segm_mAP_copypaste": "0.693 0.770 0.770 0.000 0.461 0.803"}
{"mode": "val", "epoch": 9, "iter": 7, "lr": 0.00111, "bbox_mAP": 0.741, "bbox_mAP_50": 0.845, "bbox_mAP_75": 0.845, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.479, "bbox_mAP_l": 0.828, "bbox_mAP_copypaste": "0.741 0.845 0.845 0.404 0.479 0.828", "segm_mAP": 0.761, "segm_mAP_50": 0.825, "segm_mAP_75": 0.825, "segm_mAP_s": 0.303, "segm_mAP_m": 0.479, "segm_mAP_l": 0.858, "segm_mAP_copypaste": "0.761 0.825 0.825 0.303 0.479 0.858"}
{"mode": "val", "epoch": 10, "iter": 7, "lr": 0.00124, "bbox_mAP": 0.748, "bbox_mAP_50": 0.84, "bbox_mAP_75": 0.84, "bbox_mAP_s": 0.353, "bbox_mAP_m": 0.542, "bbox_mAP_l": 0.833, "bbox_mAP_copypaste": "0.748 0.840 0.840 0.353 0.542 0.833", "segm_mAP": 0.762, "segm_mAP_50": 0.82, "segm_mAP_75": 0.82, "segm_mAP_s": 0.353, "segm_mAP_m": 0.514, "segm_mAP_l": 0.849, "segm_mAP_copypaste": "0.762 0.820 0.820 0.353 0.514 0.849"}
{"mode": "val", "epoch": 11, "iter": 7, "lr": 0.00136, "bbox_mAP": 0.749, "bbox_mAP_50": 0.841, "bbox_mAP_75": 0.841, "bbox_mAP_s": 0.454, "bbox_mAP_m": 0.509, "bbox_mAP_l": 0.836, "bbox_mAP_copypaste": "0.749 0.841 0.841 0.454 0.509 0.836", "segm_mAP": 0.767, "segm_mAP_50": 0.822, "segm_mAP_75": 0.822, "segm_mAP_s": 0.353, "segm_mAP_m": 0.529, "segm_mAP_l": 0.852, "segm_mAP_copypaste": "0.767 0.822 0.822 0.353 0.529 0.852"}
{"mode": "val", "epoch": 12, "iter": 7, "lr": 0.00015, "bbox_mAP": 0.751, "bbox_mAP_50": 0.842, "bbox_mAP_75": 0.842, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.5, "bbox_mAP_l": 0.842, "bbox_mAP_copypaste": "0.751 0.842 0.842 0.404 0.500 0.842", "segm_mAP": 0.77, "segm_mAP_50": 0.823, "segm_mAP_75": 0.823, "segm_mAP_s": 0.353, "segm_mAP_m": 0.533, "segm_mAP_l": 0.853, "segm_mAP_copypaste": "0.770 0.823 0.823 0.353 0.533 0.853"}
