2023-02-07 16:18:35,445 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.13 (default, Oct 18 2022, 18:57:03) [GCC 11.2.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 3090
CUDA_HOME: /usr
NVCC: Cuda compilation tools, release 10.1, V10.1.24
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.12.1
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.1
OpenCV: 4.7.0
MMCV: 1.6.2
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-07 16:18:35,446 - mmcls - INFO - Distributed training: True
2023-02-07 16:18:35,550 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet_CIFAR',
        depth=101,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=10,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
dataset_type = 'CIFAR10'
img_norm_cfg = dict(
    mean=[125.307, 122.961, 113.8575],
    std=[51.5865, 50.847, 51.255],
    to_rgb=False)
train_pipeline = [
    dict(type='RandomCrop', size=32, padding=4),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[125.307, 122.961, 113.8575],
        std=[51.5865, 50.847, 51.255],
        to_rgb=False),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(
        type='Normalize',
        mean=[125.307, 122.961, 113.8575],
        std=[51.5865, 50.847, 51.255],
        to_rgb=False),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=384,
    workers_per_gpu=2,
    train=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(type='RandomCrop', size=32, padding=4),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        test_mode=True),
    test=dict(
        type='CIFAR10',
        data_prefix='data/cifar10',
        pipeline=[
            dict(
                type='Normalize',
                mean=[125.307, 122.961, 113.8575],
                std=[51.5865, 50.847, 51.255],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        test_mode=True))
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=200)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/resnet101_8xb16_cifar10'
gpu_ids = range(0, 2)

2023-02-07 16:18:37,213 - mmcls - INFO - Set random seed to 1449651404, deterministic: False
2023-02-07 16:18:37,592 - mmcls - INFO - initialize ResNet_CIFAR with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-07 16:18:37,957 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet_CIFAR  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([10, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([10]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-07 16:18:40,039 - mmcls - INFO - Start running, host: yxd@amax, work_dir: /home/data1/yxd/mmclassification/work_dirs/resnet101_8xb16_cifar10
2023-02-07 16:18:40,039 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) DistOptimizerHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-07 16:18:40,040 - mmcls - INFO - workflow: [('train', 1)], max: 200 epochs
2023-02-07 16:18:40,040 - mmcls - INFO - Checkpoints will be saved to /home/data1/yxd/mmclassification/work_dirs/resnet101_8xb16_cifar10 by HardDiskBackend.
2023-02-07 16:19:15,787 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-07 16:19:21,154 - mmcls - INFO - Epoch(val) [1][14]	accuracy_top-1: 27.9700, accuracy_top-5: 82.0600
2023-02-07 16:19:53,325 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-07 16:19:58,517 - mmcls - INFO - Epoch(val) [2][14]	accuracy_top-1: 35.0700, accuracy_top-5: 86.6900
2023-02-07 16:20:30,768 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-07 16:20:35,902 - mmcls - INFO - Epoch(val) [3][14]	accuracy_top-1: 42.0700, accuracy_top-5: 91.5300
2023-02-07 16:21:08,070 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-07 16:21:13,286 - mmcls - INFO - Epoch(val) [4][14]	accuracy_top-1: 43.2700, accuracy_top-5: 92.1400
2023-02-07 16:21:45,394 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-07 16:21:50,478 - mmcls - INFO - Epoch(val) [5][14]	accuracy_top-1: 51.0200, accuracy_top-5: 94.0400
2023-02-07 16:22:22,643 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-07 16:22:27,734 - mmcls - INFO - Epoch(val) [6][14]	accuracy_top-1: 52.1300, accuracy_top-5: 94.7600
2023-02-07 16:22:59,855 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-07 16:23:04,933 - mmcls - INFO - Epoch(val) [7][14]	accuracy_top-1: 58.0200, accuracy_top-5: 95.7800
2023-02-07 16:23:37,075 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-07 16:23:42,176 - mmcls - INFO - Epoch(val) [8][14]	accuracy_top-1: 64.5800, accuracy_top-5: 96.6000
2023-02-07 16:24:14,327 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-07 16:24:19,500 - mmcls - INFO - Epoch(val) [9][14]	accuracy_top-1: 66.4200, accuracy_top-5: 97.1500
2023-02-07 16:24:51,648 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-07 16:24:56,745 - mmcls - INFO - Epoch(val) [10][14]	accuracy_top-1: 62.8800, accuracy_top-5: 96.9100
2023-02-07 16:25:28,917 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-07 16:25:33,989 - mmcls - INFO - Epoch(val) [11][14]	accuracy_top-1: 65.5200, accuracy_top-5: 97.6800
2023-02-07 16:26:06,167 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-07 16:26:11,275 - mmcls - INFO - Epoch(val) [12][14]	accuracy_top-1: 64.0100, accuracy_top-5: 95.4900
2023-02-07 16:26:43,527 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-07 16:26:48,599 - mmcls - INFO - Epoch(val) [13][14]	accuracy_top-1: 69.8300, accuracy_top-5: 97.0600
2023-02-07 16:27:20,790 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-07 16:27:25,918 - mmcls - INFO - Epoch(val) [14][14]	accuracy_top-1: 73.6500, accuracy_top-5: 98.7700
2023-02-07 16:27:58,093 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-07 16:28:03,169 - mmcls - INFO - Epoch(val) [15][14]	accuracy_top-1: 68.5900, accuracy_top-5: 98.5500
2023-02-07 16:28:35,350 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-07 16:28:40,427 - mmcls - INFO - Epoch(val) [16][14]	accuracy_top-1: 79.2700, accuracy_top-5: 98.9000
2023-02-07 16:29:12,652 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-07 16:29:17,792 - mmcls - INFO - Epoch(val) [17][14]	accuracy_top-1: 80.0800, accuracy_top-5: 99.0700
2023-02-07 16:29:49,987 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-07 16:29:55,187 - mmcls - INFO - Epoch(val) [18][14]	accuracy_top-1: 75.0700, accuracy_top-5: 98.5400
2023-02-07 16:30:27,467 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-07 16:30:32,601 - mmcls - INFO - Epoch(val) [19][14]	accuracy_top-1: 71.9800, accuracy_top-5: 96.8100
2023-02-07 16:31:04,962 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-07 16:31:10,032 - mmcls - INFO - Epoch(val) [20][14]	accuracy_top-1: 77.5800, accuracy_top-5: 98.5200
2023-02-07 16:31:42,403 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-07 16:31:47,543 - mmcls - INFO - Epoch(val) [21][14]	accuracy_top-1: 80.2900, accuracy_top-5: 99.1400
2023-02-07 16:32:19,886 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-07 16:32:25,008 - mmcls - INFO - Epoch(val) [22][14]	accuracy_top-1: 79.5100, accuracy_top-5: 99.1200
2023-02-07 16:32:57,345 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-07 16:33:02,496 - mmcls - INFO - Epoch(val) [23][14]	accuracy_top-1: 83.4700, accuracy_top-5: 99.4400
2023-02-07 16:33:34,841 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-07 16:33:39,950 - mmcls - INFO - Epoch(val) [24][14]	accuracy_top-1: 81.1600, accuracy_top-5: 98.8900
2023-02-07 16:34:12,273 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-07 16:34:17,399 - mmcls - INFO - Epoch(val) [25][14]	accuracy_top-1: 82.5200, accuracy_top-5: 99.1700
2023-02-07 16:34:49,783 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-07 16:34:54,884 - mmcls - INFO - Epoch(val) [26][14]	accuracy_top-1: 78.4800, accuracy_top-5: 99.2400
2023-02-07 16:35:27,269 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-07 16:35:32,525 - mmcls - INFO - Epoch(val) [27][14]	accuracy_top-1: 83.7700, accuracy_top-5: 99.2600
2023-02-07 16:36:04,771 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-07 16:36:09,940 - mmcls - INFO - Epoch(val) [28][14]	accuracy_top-1: 81.3700, accuracy_top-5: 99.0000
2023-02-07 16:36:42,179 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-07 16:36:47,283 - mmcls - INFO - Epoch(val) [29][14]	accuracy_top-1: 83.3800, accuracy_top-5: 99.3800
2023-02-07 16:37:19,553 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-07 16:37:24,659 - mmcls - INFO - Epoch(val) [30][14]	accuracy_top-1: 84.1200, accuracy_top-5: 99.4000
2023-02-07 16:37:57,037 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-07 16:38:02,195 - mmcls - INFO - Epoch(val) [31][14]	accuracy_top-1: 84.3800, accuracy_top-5: 99.4000
2023-02-07 16:38:34,390 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-07 16:38:39,501 - mmcls - INFO - Epoch(val) [32][14]	accuracy_top-1: 86.2500, accuracy_top-5: 99.3300
2023-02-07 16:39:11,717 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-07 16:39:16,795 - mmcls - INFO - Epoch(val) [33][14]	accuracy_top-1: 86.2400, accuracy_top-5: 99.4200
2023-02-07 16:39:49,009 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-07 16:39:54,126 - mmcls - INFO - Epoch(val) [34][14]	accuracy_top-1: 87.1200, accuracy_top-5: 99.5100
2023-02-07 16:40:26,378 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-07 16:40:31,523 - mmcls - INFO - Epoch(val) [35][14]	accuracy_top-1: 86.1800, accuracy_top-5: 99.5200
2023-02-07 16:41:03,738 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-07 16:41:08,861 - mmcls - INFO - Epoch(val) [36][14]	accuracy_top-1: 85.9800, accuracy_top-5: 99.6100
2023-02-07 16:41:41,141 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-07 16:41:46,261 - mmcls - INFO - Epoch(val) [37][14]	accuracy_top-1: 83.8400, accuracy_top-5: 99.5100
2023-02-07 16:42:18,621 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-07 16:42:23,741 - mmcls - INFO - Epoch(val) [38][14]	accuracy_top-1: 86.2900, accuracy_top-5: 99.5300
2023-02-07 16:42:55,948 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-07 16:43:01,013 - mmcls - INFO - Epoch(val) [39][14]	accuracy_top-1: 85.5300, accuracy_top-5: 99.5200
2023-02-07 16:43:33,225 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-07 16:43:38,278 - mmcls - INFO - Epoch(val) [40][14]	accuracy_top-1: 85.8300, accuracy_top-5: 99.4600
2023-02-07 16:44:10,477 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-07 16:44:15,531 - mmcls - INFO - Epoch(val) [41][14]	accuracy_top-1: 85.9800, accuracy_top-5: 99.4300
2023-02-07 16:44:47,738 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-07 16:44:52,784 - mmcls - INFO - Epoch(val) [42][14]	accuracy_top-1: 87.4500, accuracy_top-5: 99.5300
2023-02-07 16:45:24,987 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-07 16:45:30,053 - mmcls - INFO - Epoch(val) [43][14]	accuracy_top-1: 88.0300, accuracy_top-5: 99.5900
2023-02-07 16:46:02,257 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-07 16:46:07,349 - mmcls - INFO - Epoch(val) [44][14]	accuracy_top-1: 88.1200, accuracy_top-5: 99.5800
2023-02-07 16:46:39,555 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-07 16:46:44,603 - mmcls - INFO - Epoch(val) [45][14]	accuracy_top-1: 88.3100, accuracy_top-5: 99.5600
2023-02-07 16:47:16,819 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-07 16:47:21,958 - mmcls - INFO - Epoch(val) [46][14]	accuracy_top-1: 88.9600, accuracy_top-5: 99.5500
2023-02-07 16:47:54,172 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-07 16:47:59,310 - mmcls - INFO - Epoch(val) [47][14]	accuracy_top-1: 83.7600, accuracy_top-5: 99.5000
2023-02-07 16:48:31,510 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-07 16:48:36,560 - mmcls - INFO - Epoch(val) [48][14]	accuracy_top-1: 88.3000, accuracy_top-5: 99.4200
2023-02-07 16:49:08,748 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-07 16:49:13,867 - mmcls - INFO - Epoch(val) [49][14]	accuracy_top-1: 87.1600, accuracy_top-5: 99.6700
2023-02-07 16:49:46,124 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-07 16:49:51,188 - mmcls - INFO - Epoch(val) [50][14]	accuracy_top-1: 86.2000, accuracy_top-5: 99.3900
2023-02-07 16:50:23,380 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-07 16:50:28,472 - mmcls - INFO - Epoch(val) [51][14]	accuracy_top-1: 88.6400, accuracy_top-5: 99.6400
2023-02-07 16:51:00,702 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-07 16:51:05,757 - mmcls - INFO - Epoch(val) [52][14]	accuracy_top-1: 87.5900, accuracy_top-5: 99.6100
2023-02-07 16:51:38,071 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-07 16:51:43,216 - mmcls - INFO - Epoch(val) [53][14]	accuracy_top-1: 88.7100, accuracy_top-5: 99.7500
2023-02-07 16:52:15,445 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-07 16:52:20,530 - mmcls - INFO - Epoch(val) [54][14]	accuracy_top-1: 89.2200, accuracy_top-5: 99.6500
2023-02-07 16:52:52,746 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-07 16:52:57,895 - mmcls - INFO - Epoch(val) [55][14]	accuracy_top-1: 88.2100, accuracy_top-5: 99.6500
2023-02-07 16:53:30,112 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-07 16:53:35,392 - mmcls - INFO - Epoch(val) [56][14]	accuracy_top-1: 88.2300, accuracy_top-5: 99.5900
2023-02-07 16:54:07,614 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-07 16:54:12,838 - mmcls - INFO - Epoch(val) [57][14]	accuracy_top-1: 88.7300, accuracy_top-5: 99.4900
2023-02-07 16:54:45,042 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-07 16:54:50,188 - mmcls - INFO - Epoch(val) [58][14]	accuracy_top-1: 88.9400, accuracy_top-5: 99.6800
2023-02-07 16:55:22,382 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-07 16:55:27,481 - mmcls - INFO - Epoch(val) [59][14]	accuracy_top-1: 87.1500, accuracy_top-5: 99.5100
2023-02-07 16:55:59,677 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-07 16:56:04,892 - mmcls - INFO - Epoch(val) [60][14]	accuracy_top-1: 88.7800, accuracy_top-5: 99.6500
2023-02-07 16:56:37,097 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-07 16:56:42,361 - mmcls - INFO - Epoch(val) [61][14]	accuracy_top-1: 88.7800, accuracy_top-5: 99.5500
2023-02-07 16:57:14,555 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-07 16:57:19,688 - mmcls - INFO - Epoch(val) [62][14]	accuracy_top-1: 88.2200, accuracy_top-5: 99.6400
2023-02-07 16:57:51,881 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-07 16:57:57,061 - mmcls - INFO - Epoch(val) [63][14]	accuracy_top-1: 89.5700, accuracy_top-5: 99.7400
2023-02-07 16:58:29,269 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-07 16:58:34,451 - mmcls - INFO - Epoch(val) [64][14]	accuracy_top-1: 88.8400, accuracy_top-5: 99.5000
2023-02-07 16:59:06,659 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-07 16:59:11,796 - mmcls - INFO - Epoch(val) [65][14]	accuracy_top-1: 88.9600, accuracy_top-5: 99.7200
2023-02-07 16:59:44,000 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-07 16:59:49,120 - mmcls - INFO - Epoch(val) [66][14]	accuracy_top-1: 89.4700, accuracy_top-5: 99.4600
2023-02-07 17:00:21,322 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-07 17:00:26,540 - mmcls - INFO - Epoch(val) [67][14]	accuracy_top-1: 89.7300, accuracy_top-5: 99.6600
2023-02-07 17:00:58,714 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-07 17:01:03,851 - mmcls - INFO - Epoch(val) [68][14]	accuracy_top-1: 89.2300, accuracy_top-5: 99.5900
2023-02-07 17:01:36,048 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-07 17:01:41,142 - mmcls - INFO - Epoch(val) [69][14]	accuracy_top-1: 89.8300, accuracy_top-5: 99.6900
2023-02-07 17:02:13,334 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-07 17:02:18,501 - mmcls - INFO - Epoch(val) [70][14]	accuracy_top-1: 89.7300, accuracy_top-5: 99.6000
2023-02-07 17:02:50,719 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-07 17:02:55,872 - mmcls - INFO - Epoch(val) [71][14]	accuracy_top-1: 90.5300, accuracy_top-5: 99.6200
2023-02-07 17:03:28,093 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-07 17:03:33,191 - mmcls - INFO - Epoch(val) [72][14]	accuracy_top-1: 88.8700, accuracy_top-5: 99.6900
2023-02-07 17:04:05,388 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-07 17:04:10,630 - mmcls - INFO - Epoch(val) [73][14]	accuracy_top-1: 89.0300, accuracy_top-5: 99.5300
2023-02-07 17:04:42,841 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-07 17:04:47,837 - mmcls - INFO - Epoch(val) [74][14]	accuracy_top-1: 90.0100, accuracy_top-5: 99.7200
2023-02-07 17:05:20,075 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-07 17:05:25,227 - mmcls - INFO - Epoch(val) [75][14]	accuracy_top-1: 90.3200, accuracy_top-5: 99.6600
2023-02-07 17:05:57,432 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-07 17:06:02,433 - mmcls - INFO - Epoch(val) [76][14]	accuracy_top-1: 89.9400, accuracy_top-5: 99.6000
2023-02-07 17:06:34,645 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-07 17:06:39,695 - mmcls - INFO - Epoch(val) [77][14]	accuracy_top-1: 90.5400, accuracy_top-5: 99.7200
2023-02-07 17:07:11,917 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-07 17:07:17,097 - mmcls - INFO - Epoch(val) [78][14]	accuracy_top-1: 87.9400, accuracy_top-5: 99.5000
2023-02-07 17:07:49,297 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-07 17:07:54,420 - mmcls - INFO - Epoch(val) [79][14]	accuracy_top-1: 90.0600, accuracy_top-5: 99.6600
2023-02-07 17:08:26,629 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-07 17:08:31,870 - mmcls - INFO - Epoch(val) [80][14]	accuracy_top-1: 89.5900, accuracy_top-5: 99.5900
2023-02-07 17:09:04,089 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-07 17:09:09,269 - mmcls - INFO - Epoch(val) [81][14]	accuracy_top-1: 89.3200, accuracy_top-5: 99.6300
2023-02-07 17:09:41,502 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-07 17:09:46,637 - mmcls - INFO - Epoch(val) [82][14]	accuracy_top-1: 90.1500, accuracy_top-5: 99.6200
2023-02-07 17:10:18,840 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-07 17:10:23,966 - mmcls - INFO - Epoch(val) [83][14]	accuracy_top-1: 89.9600, accuracy_top-5: 99.6100
2023-02-07 17:10:56,172 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-07 17:11:01,324 - mmcls - INFO - Epoch(val) [84][14]	accuracy_top-1: 89.7300, accuracy_top-5: 99.6200
2023-02-07 17:11:33,559 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-07 17:11:38,772 - mmcls - INFO - Epoch(val) [85][14]	accuracy_top-1: 90.2300, accuracy_top-5: 99.6300
2023-02-07 17:12:11,115 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-07 17:12:16,264 - mmcls - INFO - Epoch(val) [86][14]	accuracy_top-1: 89.9100, accuracy_top-5: 99.7200
2023-02-07 17:12:48,537 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-07 17:12:53,641 - mmcls - INFO - Epoch(val) [87][14]	accuracy_top-1: 90.7000, accuracy_top-5: 99.6400
2023-02-07 17:13:25,883 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-07 17:13:30,957 - mmcls - INFO - Epoch(val) [88][14]	accuracy_top-1: 89.2700, accuracy_top-5: 99.6400
2023-02-07 17:14:03,210 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-07 17:14:08,271 - mmcls - INFO - Epoch(val) [89][14]	accuracy_top-1: 91.2800, accuracy_top-5: 99.6900
2023-02-07 17:14:40,599 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-07 17:14:45,660 - mmcls - INFO - Epoch(val) [90][14]	accuracy_top-1: 90.0000, accuracy_top-5: 99.5800
2023-02-07 17:15:18,032 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-07 17:15:23,097 - mmcls - INFO - Epoch(val) [91][14]	accuracy_top-1: 90.2100, accuracy_top-5: 99.6300
2023-02-07 17:15:55,487 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-07 17:16:00,572 - mmcls - INFO - Epoch(val) [92][14]	accuracy_top-1: 89.6700, accuracy_top-5: 99.6800
2023-02-07 17:16:32,956 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-07 17:16:38,097 - mmcls - INFO - Epoch(val) [93][14]	accuracy_top-1: 90.9500, accuracy_top-5: 99.6600
2023-02-07 17:17:10,428 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-07 17:17:15,491 - mmcls - INFO - Epoch(val) [94][14]	accuracy_top-1: 90.9800, accuracy_top-5: 99.6900
2023-02-07 17:17:47,686 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-07 17:17:52,722 - mmcls - INFO - Epoch(val) [95][14]	accuracy_top-1: 91.0100, accuracy_top-5: 99.6700
2023-02-07 17:18:24,933 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-07 17:18:29,993 - mmcls - INFO - Epoch(val) [96][14]	accuracy_top-1: 91.2800, accuracy_top-5: 99.7100
2023-02-07 17:19:02,193 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-07 17:19:07,186 - mmcls - INFO - Epoch(val) [97][14]	accuracy_top-1: 90.9500, accuracy_top-5: 99.6300
2023-02-07 17:19:39,381 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-07 17:19:44,452 - mmcls - INFO - Epoch(val) [98][14]	accuracy_top-1: 88.2800, accuracy_top-5: 99.5300
2023-02-07 17:20:16,636 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-07 17:20:21,705 - mmcls - INFO - Epoch(val) [99][14]	accuracy_top-1: 88.9900, accuracy_top-5: 99.6500
2023-02-07 17:20:53,884 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-07 17:20:58,950 - mmcls - INFO - Epoch(val) [100][14]	accuracy_top-1: 90.1500, accuracy_top-5: 99.6800
2023-02-07 17:21:31,135 - mmcls - INFO - Saving checkpoint at 101 epochs
2023-02-07 17:21:36,191 - mmcls - INFO - Epoch(val) [101][14]	accuracy_top-1: 92.3800, accuracy_top-5: 99.8000
2023-02-07 17:22:08,375 - mmcls - INFO - Saving checkpoint at 102 epochs
2023-02-07 17:22:13,312 - mmcls - INFO - Epoch(val) [102][14]	accuracy_top-1: 92.6800, accuracy_top-5: 99.8300
2023-02-07 17:22:45,508 - mmcls - INFO - Saving checkpoint at 103 epochs
2023-02-07 17:22:50,582 - mmcls - INFO - Epoch(val) [103][14]	accuracy_top-1: 92.7300, accuracy_top-5: 99.8200
2023-02-07 17:23:22,771 - mmcls - INFO - Saving checkpoint at 104 epochs
2023-02-07 17:23:27,823 - mmcls - INFO - Epoch(val) [104][14]	accuracy_top-1: 92.7200, accuracy_top-5: 99.8300
2023-02-07 17:24:00,003 - mmcls - INFO - Saving checkpoint at 105 epochs
2023-02-07 17:24:04,992 - mmcls - INFO - Epoch(val) [105][14]	accuracy_top-1: 92.5600, accuracy_top-5: 99.8300
2023-02-07 17:24:37,193 - mmcls - INFO - Saving checkpoint at 106 epochs
2023-02-07 17:24:42,139 - mmcls - INFO - Epoch(val) [106][14]	accuracy_top-1: 92.8100, accuracy_top-5: 99.8200
2023-02-07 17:25:14,334 - mmcls - INFO - Saving checkpoint at 107 epochs
2023-02-07 17:25:19,404 - mmcls - INFO - Epoch(val) [107][14]	accuracy_top-1: 92.5600, accuracy_top-5: 99.8100
2023-02-07 17:25:51,600 - mmcls - INFO - Saving checkpoint at 108 epochs
2023-02-07 17:25:56,662 - mmcls - INFO - Epoch(val) [108][14]	accuracy_top-1: 92.7100, accuracy_top-5: 99.8100
2023-02-07 17:26:28,851 - mmcls - INFO - Saving checkpoint at 109 epochs
2023-02-07 17:26:33,902 - mmcls - INFO - Epoch(val) [109][14]	accuracy_top-1: 92.6400, accuracy_top-5: 99.7900
2023-02-07 17:27:06,096 - mmcls - INFO - Saving checkpoint at 110 epochs
2023-02-07 17:27:11,046 - mmcls - INFO - Epoch(val) [110][14]	accuracy_top-1: 92.6800, accuracy_top-5: 99.8200
2023-02-07 17:27:43,235 - mmcls - INFO - Saving checkpoint at 111 epochs
2023-02-07 17:27:48,292 - mmcls - INFO - Epoch(val) [111][14]	accuracy_top-1: 92.7700, accuracy_top-5: 99.8000
2023-02-07 17:28:20,525 - mmcls - INFO - Saving checkpoint at 112 epochs
2023-02-07 17:28:25,605 - mmcls - INFO - Epoch(val) [112][14]	accuracy_top-1: 92.6700, accuracy_top-5: 99.8100
2023-02-07 17:28:57,838 - mmcls - INFO - Saving checkpoint at 113 epochs
2023-02-07 17:29:02,911 - mmcls - INFO - Epoch(val) [113][14]	accuracy_top-1: 92.7700, accuracy_top-5: 99.8200
2023-02-07 17:29:35,147 - mmcls - INFO - Saving checkpoint at 114 epochs
2023-02-07 17:29:40,108 - mmcls - INFO - Epoch(val) [114][14]	accuracy_top-1: 92.6900, accuracy_top-5: 99.8100
2023-02-07 17:30:12,349 - mmcls - INFO - Saving checkpoint at 115 epochs
2023-02-07 17:30:17,505 - mmcls - INFO - Epoch(val) [115][14]	accuracy_top-1: 92.6300, accuracy_top-5: 99.8200
2023-02-07 17:30:49,686 - mmcls - INFO - Saving checkpoint at 116 epochs
2023-02-07 17:30:54,733 - mmcls - INFO - Epoch(val) [116][14]	accuracy_top-1: 92.8900, accuracy_top-5: 99.7600
2023-02-07 17:31:26,928 - mmcls - INFO - Saving checkpoint at 117 epochs
2023-02-07 17:31:32,057 - mmcls - INFO - Epoch(val) [117][14]	accuracy_top-1: 92.7800, accuracy_top-5: 99.8100
2023-02-07 17:32:04,272 - mmcls - INFO - Saving checkpoint at 118 epochs
2023-02-07 17:32:09,377 - mmcls - INFO - Epoch(val) [118][14]	accuracy_top-1: 92.8700, accuracy_top-5: 99.7800
2023-02-07 17:32:41,565 - mmcls - INFO - Saving checkpoint at 119 epochs
2023-02-07 17:32:46,620 - mmcls - INFO - Epoch(val) [119][14]	accuracy_top-1: 92.7900, accuracy_top-5: 99.8100
2023-02-07 17:33:18,813 - mmcls - INFO - Saving checkpoint at 120 epochs
2023-02-07 17:33:23,865 - mmcls - INFO - Epoch(val) [120][14]	accuracy_top-1: 92.6900, accuracy_top-5: 99.7800
2023-02-07 17:33:56,059 - mmcls - INFO - Saving checkpoint at 121 epochs
2023-02-07 17:34:01,195 - mmcls - INFO - Epoch(val) [121][14]	accuracy_top-1: 92.8700, accuracy_top-5: 99.7900
2023-02-07 17:34:33,393 - mmcls - INFO - Saving checkpoint at 122 epochs
2023-02-07 17:34:38,500 - mmcls - INFO - Epoch(val) [122][14]	accuracy_top-1: 92.8200, accuracy_top-5: 99.8000
2023-02-07 17:35:10,691 - mmcls - INFO - Saving checkpoint at 123 epochs
2023-02-07 17:35:15,736 - mmcls - INFO - Epoch(val) [123][14]	accuracy_top-1: 92.9200, accuracy_top-5: 99.7800
2023-02-07 17:35:47,984 - mmcls - INFO - Saving checkpoint at 124 epochs
2023-02-07 17:35:53,043 - mmcls - INFO - Epoch(val) [124][14]	accuracy_top-1: 92.7800, accuracy_top-5: 99.7900
2023-02-07 17:36:25,250 - mmcls - INFO - Saving checkpoint at 125 epochs
2023-02-07 17:36:30,289 - mmcls - INFO - Epoch(val) [125][14]	accuracy_top-1: 92.7900, accuracy_top-5: 99.7900
2023-02-07 17:37:02,487 - mmcls - INFO - Saving checkpoint at 126 epochs
2023-02-07 17:37:07,588 - mmcls - INFO - Epoch(val) [126][14]	accuracy_top-1: 92.8200, accuracy_top-5: 99.7600
2023-02-07 17:37:39,798 - mmcls - INFO - Saving checkpoint at 127 epochs
2023-02-07 17:37:44,871 - mmcls - INFO - Epoch(val) [127][14]	accuracy_top-1: 92.9300, accuracy_top-5: 99.7900
2023-02-07 17:38:17,076 - mmcls - INFO - Saving checkpoint at 128 epochs
2023-02-07 17:38:22,129 - mmcls - INFO - Epoch(val) [128][14]	accuracy_top-1: 92.8900, accuracy_top-5: 99.7900
2023-02-07 17:38:54,334 - mmcls - INFO - Saving checkpoint at 129 epochs
2023-02-07 17:38:59,393 - mmcls - INFO - Epoch(val) [129][14]	accuracy_top-1: 92.7900, accuracy_top-5: 99.7800
2023-02-07 17:39:31,588 - mmcls - INFO - Saving checkpoint at 130 epochs
2023-02-07 17:39:36,676 - mmcls - INFO - Epoch(val) [130][14]	accuracy_top-1: 92.7400, accuracy_top-5: 99.7800
2023-02-07 17:40:08,915 - mmcls - INFO - Saving checkpoint at 131 epochs
2023-02-07 17:40:13,967 - mmcls - INFO - Epoch(val) [131][14]	accuracy_top-1: 92.8100, accuracy_top-5: 99.8000
2023-02-07 17:40:46,162 - mmcls - INFO - Saving checkpoint at 132 epochs
2023-02-07 17:40:51,349 - mmcls - INFO - Epoch(val) [132][14]	accuracy_top-1: 92.8900, accuracy_top-5: 99.8000
2023-02-07 17:41:23,671 - mmcls - INFO - Saving checkpoint at 133 epochs
2023-02-07 17:41:28,730 - mmcls - INFO - Epoch(val) [133][14]	accuracy_top-1: 92.7600, accuracy_top-5: 99.7900
2023-02-07 17:42:00,913 - mmcls - INFO - Saving checkpoint at 134 epochs
2023-02-07 17:42:06,009 - mmcls - INFO - Epoch(val) [134][14]	accuracy_top-1: 92.7800, accuracy_top-5: 99.7900
2023-02-07 17:42:38,379 - mmcls - INFO - Saving checkpoint at 135 epochs
2023-02-07 17:42:43,328 - mmcls - INFO - Epoch(val) [135][14]	accuracy_top-1: 92.8800, accuracy_top-5: 99.7700
2023-02-07 17:43:15,761 - mmcls - INFO - Saving checkpoint at 136 epochs
2023-02-07 17:43:20,815 - mmcls - INFO - Epoch(val) [136][14]	accuracy_top-1: 92.8500, accuracy_top-5: 99.8200
2023-02-07 17:43:53,029 - mmcls - INFO - Saving checkpoint at 137 epochs
2023-02-07 17:43:58,174 - mmcls - INFO - Epoch(val) [137][14]	accuracy_top-1: 92.9100, accuracy_top-5: 99.8100
2023-02-07 17:44:30,394 - mmcls - INFO - Saving checkpoint at 138 epochs
2023-02-07 17:44:35,479 - mmcls - INFO - Epoch(val) [138][14]	accuracy_top-1: 92.7900, accuracy_top-5: 99.7800
2023-02-07 17:45:07,663 - mmcls - INFO - Saving checkpoint at 139 epochs
2023-02-07 17:45:12,747 - mmcls - INFO - Epoch(val) [139][14]	accuracy_top-1: 92.7200, accuracy_top-5: 99.7800
2023-02-07 17:45:44,984 - mmcls - INFO - Saving checkpoint at 140 epochs
2023-02-07 17:45:50,064 - mmcls - INFO - Epoch(val) [140][14]	accuracy_top-1: 92.8100, accuracy_top-5: 99.7800
2023-02-07 17:46:22,255 - mmcls - INFO - Saving checkpoint at 141 epochs
2023-02-07 17:46:27,357 - mmcls - INFO - Epoch(val) [141][14]	accuracy_top-1: 92.7900, accuracy_top-5: 99.7900
2023-02-07 17:46:59,557 - mmcls - INFO - Saving checkpoint at 142 epochs
2023-02-07 17:47:04,597 - mmcls - INFO - Epoch(val) [142][14]	accuracy_top-1: 92.7400, accuracy_top-5: 99.7600
2023-02-07 17:47:36,804 - mmcls - INFO - Saving checkpoint at 143 epochs
2023-02-07 17:47:41,896 - mmcls - INFO - Epoch(val) [143][14]	accuracy_top-1: 92.7900, accuracy_top-5: 99.7500
2023-02-07 17:48:14,122 - mmcls - INFO - Saving checkpoint at 144 epochs
2023-02-07 17:48:19,246 - mmcls - INFO - Epoch(val) [144][14]	accuracy_top-1: 92.7200, accuracy_top-5: 99.7700
2023-02-07 17:48:51,476 - mmcls - INFO - Saving checkpoint at 145 epochs
2023-02-07 17:48:56,439 - mmcls - INFO - Epoch(val) [145][14]	accuracy_top-1: 92.8400, accuracy_top-5: 99.7600
2023-02-07 17:49:28,841 - mmcls - INFO - Saving checkpoint at 146 epochs
2023-02-07 17:49:33,912 - mmcls - INFO - Epoch(val) [146][14]	accuracy_top-1: 92.7700, accuracy_top-5: 99.7800
2023-02-07 17:50:06,127 - mmcls - INFO - Saving checkpoint at 147 epochs
2023-02-07 17:50:11,204 - mmcls - INFO - Epoch(val) [147][14]	accuracy_top-1: 92.7200, accuracy_top-5: 99.7800
2023-02-07 17:50:43,445 - mmcls - INFO - Saving checkpoint at 148 epochs
2023-02-07 17:50:48,558 - mmcls - INFO - Epoch(val) [148][14]	accuracy_top-1: 92.7700, accuracy_top-5: 99.7500
2023-02-07 17:51:20,785 - mmcls - INFO - Saving checkpoint at 149 epochs
2023-02-07 17:51:25,867 - mmcls - INFO - Epoch(val) [149][14]	accuracy_top-1: 92.6900, accuracy_top-5: 99.8000
2023-02-07 17:51:58,138 - mmcls - INFO - Saving checkpoint at 150 epochs
2023-02-07 17:52:03,204 - mmcls - INFO - Epoch(val) [150][14]	accuracy_top-1: 92.8400, accuracy_top-5: 99.7500
2023-02-07 17:52:35,396 - mmcls - INFO - Saving checkpoint at 151 epochs
2023-02-07 17:52:40,455 - mmcls - INFO - Epoch(val) [151][14]	accuracy_top-1: 92.7700, accuracy_top-5: 99.7600
2023-02-07 17:53:12,620 - mmcls - INFO - Saving checkpoint at 152 epochs
2023-02-07 17:53:17,687 - mmcls - INFO - Epoch(val) [152][14]	accuracy_top-1: 92.7500, accuracy_top-5: 99.7500
2023-02-07 17:53:49,865 - mmcls - INFO - Saving checkpoint at 153 epochs
2023-02-07 17:53:55,115 - mmcls - INFO - Epoch(val) [153][14]	accuracy_top-1: 92.8300, accuracy_top-5: 99.7800
2023-02-07 17:54:27,272 - mmcls - INFO - Saving checkpoint at 154 epochs
2023-02-07 17:54:32,360 - mmcls - INFO - Epoch(val) [154][14]	accuracy_top-1: 92.8400, accuracy_top-5: 99.7700
2023-02-07 17:55:04,549 - mmcls - INFO - Saving checkpoint at 155 epochs
2023-02-07 17:55:09,619 - mmcls - INFO - Epoch(val) [155][14]	accuracy_top-1: 92.7800, accuracy_top-5: 99.7600
2023-02-07 17:55:41,798 - mmcls - INFO - Saving checkpoint at 156 epochs
2023-02-07 17:55:46,851 - mmcls - INFO - Epoch(val) [156][14]	accuracy_top-1: 92.7600, accuracy_top-5: 99.7900
2023-02-07 17:56:19,032 - mmcls - INFO - Saving checkpoint at 157 epochs
2023-02-07 17:56:24,092 - mmcls - INFO - Epoch(val) [157][14]	accuracy_top-1: 92.7500, accuracy_top-5: 99.7700
2023-02-07 17:56:56,275 - mmcls - INFO - Saving checkpoint at 158 epochs
2023-02-07 17:57:01,393 - mmcls - INFO - Epoch(val) [158][14]	accuracy_top-1: 92.6400, accuracy_top-5: 99.7800
2023-02-07 17:57:33,569 - mmcls - INFO - Saving checkpoint at 159 epochs
2023-02-07 17:57:38,631 - mmcls - INFO - Epoch(val) [159][14]	accuracy_top-1: 92.8500, accuracy_top-5: 99.7700
2023-02-07 17:58:10,895 - mmcls - INFO - Saving checkpoint at 160 epochs
2023-02-07 17:58:15,953 - mmcls - INFO - Epoch(val) [160][14]	accuracy_top-1: 92.7600, accuracy_top-5: 99.7400
2023-02-07 17:58:48,208 - mmcls - INFO - Saving checkpoint at 161 epochs
2023-02-07 17:58:53,284 - mmcls - INFO - Epoch(val) [161][14]	accuracy_top-1: 92.8800, accuracy_top-5: 99.7700
2023-02-07 17:59:25,667 - mmcls - INFO - Saving checkpoint at 162 epochs
2023-02-07 17:59:30,795 - mmcls - INFO - Epoch(val) [162][14]	accuracy_top-1: 92.7600, accuracy_top-5: 99.7500
2023-02-07 18:00:03,119 - mmcls - INFO - Saving checkpoint at 163 epochs
2023-02-07 18:00:08,176 - mmcls - INFO - Epoch(val) [163][14]	accuracy_top-1: 92.8900, accuracy_top-5: 99.7800
2023-02-07 18:00:40,337 - mmcls - INFO - Saving checkpoint at 164 epochs
2023-02-07 18:00:45,377 - mmcls - INFO - Epoch(val) [164][14]	accuracy_top-1: 92.8300, accuracy_top-5: 99.7700
2023-02-07 18:01:17,756 - mmcls - INFO - Saving checkpoint at 165 epochs
2023-02-07 18:01:22,692 - mmcls - INFO - Epoch(val) [165][14]	accuracy_top-1: 92.7900, accuracy_top-5: 99.7500
2023-02-07 18:01:55,073 - mmcls - INFO - Saving checkpoint at 166 epochs
2023-02-07 18:02:00,147 - mmcls - INFO - Epoch(val) [166][14]	accuracy_top-1: 92.9100, accuracy_top-5: 99.7900
2023-02-07 18:02:32,468 - mmcls - INFO - Saving checkpoint at 167 epochs
2023-02-07 18:02:37,594 - mmcls - INFO - Epoch(val) [167][14]	accuracy_top-1: 92.7900, accuracy_top-5: 99.8000
2023-02-07 18:03:09,824 - mmcls - INFO - Saving checkpoint at 168 epochs
2023-02-07 18:03:14,896 - mmcls - INFO - Epoch(val) [168][14]	accuracy_top-1: 92.7400, accuracy_top-5: 99.7400
2023-02-07 18:03:47,084 - mmcls - INFO - Saving checkpoint at 169 epochs
2023-02-07 18:03:52,225 - mmcls - INFO - Epoch(val) [169][14]	accuracy_top-1: 92.8400, accuracy_top-5: 99.7400
2023-02-07 18:04:24,553 - mmcls - INFO - Saving checkpoint at 170 epochs
2023-02-07 18:04:29,614 - mmcls - INFO - Epoch(val) [170][14]	accuracy_top-1: 92.9200, accuracy_top-5: 99.7600
2023-02-07 18:05:01,989 - mmcls - INFO - Saving checkpoint at 171 epochs
2023-02-07 18:05:07,057 - mmcls - INFO - Epoch(val) [171][14]	accuracy_top-1: 92.8200, accuracy_top-5: 99.7900
2023-02-07 18:05:39,431 - mmcls - INFO - Saving checkpoint at 172 epochs
2023-02-07 18:05:44,497 - mmcls - INFO - Epoch(val) [172][14]	accuracy_top-1: 92.8300, accuracy_top-5: 99.7900
2023-02-07 18:06:16,733 - mmcls - INFO - Saving checkpoint at 173 epochs
2023-02-07 18:06:21,796 - mmcls - INFO - Epoch(val) [173][14]	accuracy_top-1: 92.7600, accuracy_top-5: 99.7700
2023-02-07 18:06:54,159 - mmcls - INFO - Saving checkpoint at 174 epochs
2023-02-07 18:06:59,239 - mmcls - INFO - Epoch(val) [174][14]	accuracy_top-1: 92.7500, accuracy_top-5: 99.7600
2023-02-07 18:07:31,419 - mmcls - INFO - Saving checkpoint at 175 epochs
2023-02-07 18:07:36,469 - mmcls - INFO - Epoch(val) [175][14]	accuracy_top-1: 92.8000, accuracy_top-5: 99.7400
2023-02-07 18:08:08,847 - mmcls - INFO - Saving checkpoint at 176 epochs
2023-02-07 18:08:13,843 - mmcls - INFO - Epoch(val) [176][14]	accuracy_top-1: 92.7200, accuracy_top-5: 99.7500
2023-02-07 18:08:46,074 - mmcls - INFO - Saving checkpoint at 177 epochs
2023-02-07 18:08:51,022 - mmcls - INFO - Epoch(val) [177][14]	accuracy_top-1: 92.8300, accuracy_top-5: 99.7400
2023-02-07 18:09:23,222 - mmcls - INFO - Saving checkpoint at 178 epochs
2023-02-07 18:09:28,157 - mmcls - INFO - Epoch(val) [178][14]	accuracy_top-1: 92.7100, accuracy_top-5: 99.7500
2023-02-07 18:10:00,382 - mmcls - INFO - Saving checkpoint at 179 epochs
2023-02-07 18:10:05,339 - mmcls - INFO - Epoch(val) [179][14]	accuracy_top-1: 92.7800, accuracy_top-5: 99.7500
2023-02-07 18:10:37,527 - mmcls - INFO - Saving checkpoint at 180 epochs
2023-02-07 18:10:42,476 - mmcls - INFO - Epoch(val) [180][14]	accuracy_top-1: 92.8600, accuracy_top-5: 99.7700
2023-02-07 18:11:14,658 - mmcls - INFO - Saving checkpoint at 181 epochs
2023-02-07 18:11:19,597 - mmcls - INFO - Epoch(val) [181][14]	accuracy_top-1: 92.9000, accuracy_top-5: 99.7700
2023-02-07 18:11:51,804 - mmcls - INFO - Saving checkpoint at 182 epochs
2023-02-07 18:11:56,778 - mmcls - INFO - Epoch(val) [182][14]	accuracy_top-1: 92.7300, accuracy_top-5: 99.7700
2023-02-07 18:12:28,966 - mmcls - INFO - Saving checkpoint at 183 epochs
2023-02-07 18:12:34,000 - mmcls - INFO - Epoch(val) [183][14]	accuracy_top-1: 92.8200, accuracy_top-5: 99.7500
2023-02-07 18:13:06,203 - mmcls - INFO - Saving checkpoint at 184 epochs
2023-02-07 18:13:11,360 - mmcls - INFO - Epoch(val) [184][14]	accuracy_top-1: 92.8400, accuracy_top-5: 99.7600
2023-02-07 18:13:43,549 - mmcls - INFO - Saving checkpoint at 185 epochs
2023-02-07 18:13:48,606 - mmcls - INFO - Epoch(val) [185][14]	accuracy_top-1: 92.7900, accuracy_top-5: 99.7600
2023-02-07 18:14:20,798 - mmcls - INFO - Saving checkpoint at 186 epochs
2023-02-07 18:14:25,892 - mmcls - INFO - Epoch(val) [186][14]	accuracy_top-1: 92.8000, accuracy_top-5: 99.7800
2023-02-07 18:14:58,082 - mmcls - INFO - Saving checkpoint at 187 epochs
2023-02-07 18:15:03,022 - mmcls - INFO - Epoch(val) [187][14]	accuracy_top-1: 92.7800, accuracy_top-5: 99.7300
2023-02-07 18:15:35,198 - mmcls - INFO - Saving checkpoint at 188 epochs
2023-02-07 18:15:40,252 - mmcls - INFO - Epoch(val) [188][14]	accuracy_top-1: 92.9000, accuracy_top-5: 99.7600
2023-02-07 18:16:12,434 - mmcls - INFO - Saving checkpoint at 189 epochs
2023-02-07 18:16:17,522 - mmcls - INFO - Epoch(val) [189][14]	accuracy_top-1: 92.8600, accuracy_top-5: 99.7500
2023-02-07 18:16:49,721 - mmcls - INFO - Saving checkpoint at 190 epochs
2023-02-07 18:16:54,803 - mmcls - INFO - Epoch(val) [190][14]	accuracy_top-1: 92.8400, accuracy_top-5: 99.7700
2023-02-07 18:17:26,998 - mmcls - INFO - Saving checkpoint at 191 epochs
2023-02-07 18:17:32,088 - mmcls - INFO - Epoch(val) [191][14]	accuracy_top-1: 92.8100, accuracy_top-5: 99.7400
2023-02-07 18:18:04,272 - mmcls - INFO - Saving checkpoint at 192 epochs
2023-02-07 18:18:09,322 - mmcls - INFO - Epoch(val) [192][14]	accuracy_top-1: 92.7500, accuracy_top-5: 99.7500
2023-02-07 18:18:41,546 - mmcls - INFO - Saving checkpoint at 193 epochs
2023-02-07 18:18:46,591 - mmcls - INFO - Epoch(val) [193][14]	accuracy_top-1: 92.6800, accuracy_top-5: 99.7400
2023-02-07 18:19:18,986 - mmcls - INFO - Saving checkpoint at 194 epochs
2023-02-07 18:19:24,048 - mmcls - INFO - Epoch(val) [194][14]	accuracy_top-1: 92.8400, accuracy_top-5: 99.7500
2023-02-07 18:19:56,242 - mmcls - INFO - Saving checkpoint at 195 epochs
2023-02-07 18:20:01,300 - mmcls - INFO - Epoch(val) [195][14]	accuracy_top-1: 92.7200, accuracy_top-5: 99.7800
2023-02-07 18:20:33,491 - mmcls - INFO - Saving checkpoint at 196 epochs
2023-02-07 18:20:38,620 - mmcls - INFO - Epoch(val) [196][14]	accuracy_top-1: 92.8100, accuracy_top-5: 99.7500
2023-02-07 18:21:10,801 - mmcls - INFO - Saving checkpoint at 197 epochs
2023-02-07 18:21:15,865 - mmcls - INFO - Epoch(val) [197][14]	accuracy_top-1: 92.8200, accuracy_top-5: 99.7500
2023-02-07 18:21:48,053 - mmcls - INFO - Saving checkpoint at 198 epochs
2023-02-07 18:21:53,101 - mmcls - INFO - Epoch(val) [198][14]	accuracy_top-1: 92.9000, accuracy_top-5: 99.8000
2023-02-07 18:22:25,291 - mmcls - INFO - Saving checkpoint at 199 epochs
2023-02-07 18:22:30,356 - mmcls - INFO - Epoch(val) [199][14]	accuracy_top-1: 92.8800, accuracy_top-5: 99.7400
2023-02-07 18:23:02,552 - mmcls - INFO - Saving checkpoint at 200 epochs
2023-02-07 18:23:07,606 - mmcls - INFO - Epoch(val) [200][14]	accuracy_top-1: 92.8100, accuracy_top-5: 99.7500
